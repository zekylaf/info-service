"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
/**
 * node-riveter - Mix-in, inheritance and constructor extend behavior for your JavaScript enjoyment.
 * © 2012 - Copyright appendTo, LLC
 * © 2019 - Copyright Zach Lintz, LLC
 * Author(s): Jim Cowart, Nicholas Cloud, Doug Neiner, Zach Lintz
 * Version: v0.2.1
 * Url: https://github.com/Foo-Foo-MQ/node-riveter
 * License(s): MIT, GPL
 */
var _ = __importStar(require("lodash"));
var utils_1 = require("./utils");
var slice = Array.prototype.slice;
var Riveter = /** @class */ (function () {
    function Riveter() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        args.forEach(Riveter.rivet); // target es5 required for constructor to be allowed to be called without the "new" keyword
    }
    Riveter.rivet = function (fn) {
        if (!Object.prototype.hasOwnProperty.call(fn, 'extend')) {
            fn.extend = function (props, ctorProps, options) {
                return Riveter.extend(fn, props, ctorProps, options);
            };
        }
        if (!Object.prototype.hasOwnProperty.call(fn, 'compose')) {
            fn.compose = function () {
                return Riveter.compose.apply(this, [fn].concat(slice.call(arguments, 0)));
            };
        }
        if (!Object.prototype.hasOwnProperty.call(fn, 'inherits')) {
            fn.inherits = function (parent, ctorProps, options) {
                return Riveter.inherits(this, parent, ctorProps, options);
            };
        }
        if (!Object.prototype.hasOwnProperty.call(fn, 'mixin')) {
            fn.mixin = function () {
                return Riveter.mixin.apply(this, [fn].concat(slice.call(arguments, 0)));
            };
        }
        if (!Object.prototype.hasOwnProperty.call(fn, 'punch')) {
            fn.punch = function () {
                return Riveter.punch.apply(this, [fn].concat(slice.call(arguments, 0)));
            };
        }
    };
    Riveter.inherits = function (child, parent, ctorProps, options) {
        options = options || {};
        var childProto;
        var TmpCtor = function () { };
        var Child = function () {
            parent.apply(this, arguments);
        };
        if (typeof child === 'object') {
            if (Object.prototype.hasOwnProperty.call(child, 'constructor')) {
                Child = child.constructor;
            }
            childProto = child;
        }
        else {
            Child = child;
            childProto = child.prototype;
        }
        Riveter.rivet(Child);
        if (options.deep) {
            utils_1.deepExtend(Child, parent, ctorProps);
        }
        else {
            _.defaults(Child, parent, ctorProps);
        }
        TmpCtor.prototype = parent.prototype;
        Child.prototype = new TmpCtor();
        if (options.deep) {
            utils_1.deepExtend(Child.prototype, childProto, {
                constructor: Child
            });
        }
        else {
            _.extend(Child.prototype, childProto, {
                constructor: Child
            });
        }
        Child.__super = parent;
        // Next line is all about Backbone compatibility
        Child.__super__ = parent.prototype;
        return Child;
    };
    Riveter.extend = function (ctor, props, ctorProps, options) {
        return Riveter.inherits(props, ctor, ctorProps, options);
    };
    Riveter.compose = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var ctor = args.shift();
        Riveter.rivet(ctor);
        var mixin = _.reduce(args, function (memo, val) {
            if (Object.prototype.hasOwnProperty.call(val, '_preInit')) {
                memo.preInit.push(val._preInit);
            }
            if (Object.prototype.hasOwnProperty.call(val, '_postInit')) {
                memo.postInit.push(val._postInit);
            }
            val = val.mixin || val;
            memo.items.push(val);
            return memo;
        }, {
            items: [],
            preInit: [],
            postInit: []
        });
        var res = ctor.extend({
            constructor: function () {
                var self = this;
                var args = slice.call(arguments, 0);
                _.each(mixin.preInit, function (initializer) {
                    initializer.apply(self, args);
                });
                ctor.prototype.constructor.apply(this, args);
                _.each(mixin.postInit, function (initializer) {
                    initializer.apply(self, args);
                });
            }
        });
        Riveter.rivet(res);
        _.defaults(res.prototype, _.extend.apply(null, [{}].concat(mixin.items)));
        return res;
    };
    Riveter.mixin = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var ctor = args.shift();
        Riveter.rivet(ctor);
        _.defaults(ctor.prototype, _.extend.apply(null, [{}].concat(args)));
        return ctor;
    };
    Riveter.punch = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var ctor = args.shift();
        Riveter.rivet(ctor);
        _.extend(ctor.prototype, _.extend.apply(null, [{}].concat(args)));
        return ctor;
    };
    return Riveter;
}());
module.exports = Riveter;
//# sourceMappingURL=riveter.js.map